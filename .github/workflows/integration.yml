name: CI

on:
  push:
    paths-ignore:
      - '**/*.md'
      - 'examples*/**'
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:
  schedule:
    - cron: '5 4 * * *'

env:
  basepython: 3.9

jobs:
  lint:
    services:
      stack:
        image: redis/redi-stack-server:edge
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3
        ports:
          - 6379:6379
    env:
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true
    name: Code linting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: install base python
        uses: actions/setup-python@v4
        with:
          python-version: ${{env.basepython}}

      - name: Cache paths
        uses: actions/cache@v2
        with:
          path: |
            .tox
            ~/.virtualenvs
            ~/.cache/pip
            ~/.cache/pypoetry
          key: lint-${{ hashFiles('**/poetry.lock', '**/tox.ini', '**/pyproject.toml') }}-${{ matrix.python-version}}
          restore-keys: |
            lint-${{ hashFiles('**/poetry.lock', '**/tox.ini', '**/pyproject.toml') }}-${{ matrix.python-version}}

      - name: prepare the environment
        run: |
          pip install -U setuptools pip poetry==1.3.2 tox-poetry
          poetry config virtualenvs.create false
          poetry install
      - name: lint
        run: tox -e linters

  tests:
    runs-on: ubuntu-latest
    env:
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true
    strategy:
      matrix:
        python-version: ['3.6', '3.7', '3.8', '3.9', '3.10']
    name: Test Python ${{matrix.python-version}}
    steps:
      - uses: actions/checkout@v3
      - name: install base python
        uses: actions/setup-python@v4
        with:
          python-version: ${{matrix.python-version}}
      - name: Cache paths
        uses: actions/cache@v2
        with:
          path: |
            .tox
            ~/.virtualenvs
            ~/.cache/pip
            ~/.cache/pypoetry
          key: cover-${{ hashFiles('**/poetry.lock', '**/tox.ini', '**/pyproject.toml') }}-${{ matrix.python-version}}
          restore-keys: |
            cover-${{ hashFiles('**/poetry.lock', '**/tox.ini', '**/pyproject.toml') }}-${{ matrix.python-version}}

      - name: prepare the environment
        run: |
          pip install -U setuptools pip poetry tox-docker tox-poetry
          poetry config virtualenvs.create false
          poetry install
      - name: run tests
        run: tox -e cover
      - name: Upload coverage
        uses: codecov/codecov-action@v2
        with:
          fail_ci_if_error: false
          token: ${{ secrets.CODECOVTOKEN }}
